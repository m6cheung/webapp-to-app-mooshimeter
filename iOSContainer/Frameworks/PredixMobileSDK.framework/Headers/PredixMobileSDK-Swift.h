// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#import <PredixMobileSDK/PredixMobileSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
/**
  Enumeration for specifying location of configuration elements.
*/
typedef SWIFT_ENUM(NSInteger, ConfigurationLocation) {
/**
  Configuration is stored in the Settings bundle
*/
  ConfigurationLocationSettings = 0,
/**
  Configuration is stored in the Info.plist
*/
  ConfigurationLocationInfoplist = 1,
};


/**
  Database interaction class. Controls setup of replication, access to documents, manipulation of attachments, etc.
*/
SWIFT_CLASS("_TtC15PredixMobileSDK15DatabaseManager")
@interface DatabaseManager : NSObject
/**
  Associates given filter name and filter parameters with push (client to server) replication
  seealso:
  \code
  PredixMobilityConfiguration.pushReplicationFilterDefinitions
  \endcode
  \param filterName name of filter. This filter must be defined in PredixMobilityConfiguration.pushReplicationFilterDefinitions

  \param parameters Dictionary of filter parameters passed to filter function.

  \param onComplete Closure called when assignment of filter is complete consisting of:

  \param success will be false if filterName is not defined in PredixMobilityConfiguration.pushReplicationFilterDefinitions, otherwise true.

  \param error nil, or containing the error that occurred if success is false

*/
+ (void)assignFilterToPushReplicationWithFilterName:(NSString * _Nonnull)filterName parameters:(NSDictionary<NSString *, id> * _Nullable)parameters onComplete:(void (^ _Nonnull)(BOOL, NSError * _Nullable))onComplete;
/**
  Adds or removes given channel names to pull (server to client) replication
  \param channelsToAdd String array of channels to add. Pull replication will be restricted to only these channels

  \param channelsToRemove String array of channels to remove. Removing all channels will allow replication of all data to which the user has access.

  \param onComplete Closure called when assignment of channels is complete consisting of:

  \param success will only be false if both channelsToAdd and channelsToRemove is nil or an empty array.

  \param error nil, or containing the error that occurred if success is false

*/
+ (void)updatePullReplicationChannelsWithChannelsToAdd:(NSArray<NSString *> * _Nullable)channelsToAdd channelsToRemove:(NSArray<NSString *> * _Nullable)channelsToRemove onComplete:(void (^ _Nonnull)(BOOL, NSError * _Nullable))onComplete;
/**
  Removes all channel names for pull (server to client) replication
  \param onComplete Closure called when assignment of channels is complete consisting of:

  \param success true if the channels were removed successfully

  \param error nil, or containing the error that occurred if success is false

*/
+ (void)removeAllPullReplicationChannelsOnComplete:(void (^ _Nonnull)(BOOL, NSError * _Nullable))onComplete;
/**
  Returns a document from the database.
  Note, that if a document with the provided document id does not exist, the success return value in the onComplete closure will still be true, but the returned document dictionary will be nil.
  \param withId Document Id of document to retrieve

  \param fromDatabase Optional name of database. If included must match PredixMobilityConfiguration.defaultDatabaseName or be token “~”

  \param onComplete Closure that will be called when the document has been retrieved consisting of:

  \param success true if no error occurred retrieving document

  \param error nil, or the error that occurred if success is false

  \param document the contents of the retrieved document, or nil if no document with the given Id could be found or an error occurred

*/
+ (void)getDocumentWithId:(NSString * _Nonnull)documentId fromDatabase:(NSString * _Nullable)database onComplete:(void (^ _Nonnull)(BOOL, NSError * _Nullable, NSDictionary * _Nullable))onComplete;
/**
  Creates a document in the database
  \param from [String : Any] document properties from which to create the document

  \param withId Optional String Document Id of document to create. If nil, a unique id will be automatically generated.

  \param inDatabase Optional String name of database. If included must match PredixMobilityConfiguration.defaultDatabaseName or be token “~”

  \param onComplete taskReturnDictionaryBlock closure that will be called when the document has been created consisting of:

  \param success true if no error occurred creating the document

  \param error nil, or the error that occurred if success is false

  \param document contents of the created document, otherwise nil if an error occurred

*/
+ (void)createDocumentFrom:(NSDictionary<NSString *, id> * _Nonnull)documentDictionary withId:(NSString * _Nullable)documentId inDatabase:(NSString * _Nullable)database onComplete:(void (^ _Nonnull)(BOOL, NSError * _Nullable, NSDictionary * _Nullable))onComplete;
/**
  Updates a document in the database
  \param from [String : Any] document properties to add/update in the document

  \param withId String Document Id of document to update.

  \param inDatabase Optional String name of database. If included must match PredixMobilityConfiguration.defaultDatabaseName or be token “~”

  \param onComplete taskReturnDictionaryBlock closure that will be called when the document has been updated consisting of:

  \param success true if no error occurred updating the document

  \param error nil, or containing the error that occurred if success is false

  \param document contents of the updated document, otherwise nil if an error occurred

*/
+ (void)updateDocumentFrom:(NSDictionary<NSString *, id> * _Nonnull)documentDictionary withId:(NSString * _Nonnull)documentId inDatabase:(NSString * _Nullable)database onComplete:(void (^ _Nonnull)(BOOL, NSError * _Nullable, NSDictionary * _Nullable))onComplete;
/**
  Deletes a document from the database
  \param withId String Document Id of document to delete.

  \param fromDatabase Optional String name of database. If included must match PredixMobilityConfiguration.defaultDatabaseName or be token “~”

  \param onComplete taskCompleteBlock closure that will be called when the document has been deleted consisting of:

  \param success true if the document was deleted successfully

  \param error nil, or containing the error that occurred if success is false

*/
+ (void)deleteDocumentWithId:(NSString * _Nonnull)documentId fromDatabase:(NSString * _Nullable)database onComplete:(void (^ _Nonnull)(BOOL, NSError * _Nullable))onComplete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Used to create full text search database views.
  <ul>
    <li>
      example:
      \code
        PredixMobilityConfiguration.appendDataViewDefinition("views/searchtext", version: "1") { (properties: [String : Any], emit: (Any, Any?) -> ()) -> () in

            if let body = properties["body"] as? String
            {
                emit(FullTextSearch.createKey(body), nil)
            }
        }

      \endcode</li>
  </ul>
*/
SWIFT_CLASS("_TtC15PredixMobileSDK14FullTextSearch")
@interface FullTextSearch : NSObject
/**
  Defines the key to use for the full text search, should be a field name in the document.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) id _Nonnull (^ _Nonnull createKey)(NSString * _Nonnull);)
+ (id _Nonnull (^ _Nonnull)(NSString * _Nonnull))createKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum LoggerLevel : NSInteger;

/**
  Protocol used by Logger class for logging operations.
*/
SWIFT_PROTOCOL("_TtP15PredixMobileSDK14LoggerProtocol_")
@protocol LoggerProtocol
/**
  Sets and gets the current logger verbosity level.
*/
@property (nonatomic) enum LoggerLevel loggerLevel;
/**
  Return true if the log level will output trace level messages.
*/
- (BOOL)isTraceEnabled;
/**
  log a trace message.
*/
- (void)trace:(NSString * _Nonnull)log;
/**
  Return true if the log level will output debug level messages.
*/
- (BOOL)isDebugEnabled;
/**
  log a debug message.
*/
- (void)debug:(NSString * _Nonnull)log;
/**
  Return true if the log level will output info level messages.
*/
- (BOOL)isInfoEnabled;
/**
  log a info message.
*/
- (void)info:(NSString * _Nonnull)log;
/**
  Return true if the log level will output warning level messages.
*/
- (BOOL)isWarnEnabled;
/**
  log a warning message.
*/
- (void)warn:(NSString * _Nonnull)log;
/**
  Return true if the log level will output error level messages.
*/
- (BOOL)isErrorEnabled;
/**
  log a error message.
*/
- (void)error:(NSString * _Nonnull)log;
/**
  Return true if the log level will output fatal level messages.
*/
- (BOOL)isFatalEnabled;
/**
  log a fatal message.
*/
- (void)fatal:(NSString * _Nonnull)log;
/**
  Return true if logging is disabled and nothing will be logged.
*/
- (BOOL)isLoggingOff;
@end


/**
  Provides Logging support for the SDK.
  seealso:

  <ul>
    <li>
      <a href="https://developer.apple.com/reference/os/1891852-logging">Logging - os | Apple Developer Documentation</a>
    </li>
    <li>
      <a href="https://developer.apple.com/videos/play/wwdc2016/721/">WWDC 2016: Unified Logging and Activity Tracing</a>
    </li>
  </ul>
  <ul>
    <li>
      On iOS 9 and below and macOS El Capitan and below this class will use the Apple NSLog-style logs.
    </li>
    <li>
      When running in iOS 10+ and macOS Sierra+ this class will use the Apple Unified Logging API
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC15PredixMobileSDK6Logger")
@interface Logger : NSObject <LoggerProtocol>
/**
  Shared instance of the Logger class
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <LoggerProtocol> _Nonnull shared;)
+ (id <LoggerProtocol> _Nonnull)shared;
+ (void)setShared:(id <LoggerProtocol> _Nonnull)value;
/**
  Sets the shared instance of the Logger class.
  Can be used to replace Logger functionality with subclassed Logger, or new implementation of LoggerProtocol.
*/
+ (void)setSharedLoggerWithLogger:(id <LoggerProtocol> _Nonnull)logger;
/**
  Initialization
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Used to override the logging functionality just before it’s sent to the system logger.
  If a closure is provided, this closure will be called with a fully-formed log string instead of being sent to the standard platform logging system.
*/
- (void)setLogLineWriterClosure:(void (^ _Nullable)(NSString * _Nonnull))writerBlock;
/**
  Sets and gets the current logger verbosity level. Logs more verbose than this level will not be output to the logging system.
  For example:
  If the loggerLevel is set to \code
  LoggerLevel.info
  \endcode, then:
  \code
  Logger.shared.loggerlevel = LoggerLevel.info
  \endcode
  \code
  Logger.warn("this will be output")
  \endcode
  \code
  Logger.info("this will be output")
  \endcode
  \code
  Logger.debug("this will not be output")
  \endcode
  \code
  Logger.trace("this will not be output")
  \endcode
*/
@property (nonatomic) enum LoggerLevel loggerLevel;
/**
  Return true if the log level will output trace level messages.
*/
- (BOOL)isTraceEnabled;
/**
  log a trace message.
*/
- (void)trace:(NSString * _Nonnull)log;
/**
  Return true if the log level will output debug level messages.
*/
- (BOOL)isDebugEnabled;
/**
  log a debug message.
*/
- (void)debug:(NSString * _Nonnull)log;
/**
  Return true if the log level will output info level messages.
*/
- (BOOL)isInfoEnabled;
/**
  log a info message.
*/
- (void)info:(NSString * _Nonnull)log;
/**
  Return true if the log level will output warning level messages.
*/
- (BOOL)isWarnEnabled;
/**
  log a warning message.
*/
- (void)warn:(NSString * _Nonnull)log;
/**
  Return true if the log level will output error level messages.
*/
- (BOOL)isErrorEnabled;
/**
  log a error message.
*/
- (void)error:(NSString * _Nonnull)log;
/**
  Return true if the log level will output fatal level messages.
*/
- (BOOL)isFatalEnabled;
/**
  log a fatal message.
*/
- (void)fatal:(NSString * _Nonnull)log;
/**
  Return true if logging is disabled and nothing will be logged.
*/
- (BOOL)isLoggingOff;
/**
  Shortcut to default logger: Return true if the log level will output trace level messages.
*/
+ (BOOL)isTraceEnabled;
/**
  Shortcut to default logger: log a trace message.
*/
+ (void)trace:(NSString * _Nonnull)log;
/**
  Shortcut to default logger: Return true if the log level will output debug level messages.
*/
+ (BOOL)isDebugEnabled;
/**
  Shortcut to default logger: log a debug message.
*/
+ (void)debug:(NSString * _Nonnull)log;
/**
  Shortcut to default logger: Return true if the log level will output info level messages.
*/
+ (BOOL)isInfoEnabled;
/**
  Shortcut to default logger: log a info message.
*/
+ (void)info:(NSString * _Nonnull)log;
/**
  Shortcut to default logger: Return true if the log level will output warning level messages.
*/
+ (BOOL)isWarnEnabled;
/**
  Shortcut to default logger: log a warning message.
*/
+ (void)warn:(NSString * _Nonnull)log;
/**
  Shortcut to default logger: Return true if the log level will output error level messages.
*/
+ (BOOL)isErrorEnabled;
/**
  Shortcut to default logger: log a error message.
*/
+ (void)error:(NSString * _Nonnull)log;
/**
  Shortcut to default logger: Return true if the log level will output fatal level messages.
*/
+ (BOOL)isFatalEnabled;
/**
  Shortcut to default logger: log a fatal message.
*/
+ (void)fatal:(NSString * _Nonnull)log;
/**
  Shortcut to default logger: Return true if logging is disabled and nothing will be logged.
*/
+ (BOOL)isLoggingOff;
@end

/**
  Logging verbosity levels
*/
typedef SWIFT_ENUM(NSInteger, LoggerLevel) {
/**
  No logging will be output
*/
  LoggerLevelOff = 0,
/**
  Output Fatal level log messages only
*/
  LoggerLevelFatal = 1,
/**
  Error level
*/
  LoggerLevelError = 2,
/**
  Warn level
*/
  LoggerLevelWarn = 3,
/**
  Info level
*/
  LoggerLevelInfo = 4,
/**
  Debug level
*/
  LoggerLevelDebug = 5,
/**
  Trace level - most verbose. All messages are output.
*/
  LoggerLevelTrace = 6,
};


@class NSHTTPURLResponse;
@class NSURLResponse;

/**
  Protocol all services must implement to be considered a “service”
  important:
  You will notice all these methods are staticly defined. Services are expected to be completely static classes. This is done to emphasize and promote the stateless nature of service calls. Services should be stateless, reentrant, and thread-safe.
  <em>There are no guarentees for how, when, on what thread, or how often any service is called.</em>
*/
SWIFT_PROTOCOL("_TtP15PredixMobileSDK15ServiceProtocol_")
@protocol ServiceProtocol
/**
  Unique identifier for this service.
  The serviceIdentifier string will make up the first part of the path for requests made to services.
  Example:
  If a serviceIdentifier is “foo” then a request to the service will look like:
  \code
  http://pmapi/foo
  \endcode
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull serviceIdentifier;)
+ (NSString * _Nonnull)serviceIdentifier;
/**
  The method called when the ServiceRouter detects a request was made for this service (as identified by the serviceIdentifier)
  \param request the URLRequest that was made to call this service.

  \param response a template response, preset to have a 200 status code.
  This response object can be used as-is or be used to create a new response.

  \param responseReturn First of three return closures. Used to return the response object back to the calling code.
  <em>This closure must be called and must be called only once.</em>

  \param dataReturn Second of the three return closures. Used to return data back to the calling code.
  This closure is may be skipped if no data is to be returned.
  If called, this closure must be called after the responseReturn closure, and before the requestComplete closure.

  \param requestComplete Third and final of the three return closures. This indicates the service request has completed.
  <em>This closure must be called, or the service request will not be complete</em>
  <em>No additional code should be executed after this closure is called</em>

*/
+ (void)performRequest:(NSURLRequest * _Nonnull)request response:(NSHTTPURLResponse * _Nonnull)response responseReturn:(responseReturnBlock _Nonnull)responseReturn dataReturn:(dataReturnBlock _Nonnull)dataReturn requestComplete:(requestCompleteBlock _Nonnull)requestComplete;
@optional
/**
  Optional: if this method is implimented, the this method will be called when the service is registered with the service router.
*/
+ (void)registered;
/**
  Optional: if this method is implimented, the this method will be called when the service is unregistered with the service router.
*/
+ (void)unregistered;
@end


/**
  Provides the ability to open a URL on device external to app.
  URLs may launch different apps on the device, for example:
  <ul>
    <li>
      The URL \code
      mailto://someone@example.com?Subject=Hello%20again
      \endcode would open the mail app.
    </li>
    <li>
      The URL \code
      tel:1-800-555-1212
      \endcode would open the phone app, and initiate a phone call.
    </li>
    <li>
      The URL \code
      https://www.google.com
      \endcode would open the Safari app.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC15PredixMobileSDK14OpenURLService")
@interface OpenURLService : NSObject <ServiceProtocol>
/**
  Unique identifier for this service.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull serviceIdentifier;)
+ (NSString * _Nonnull)serviceIdentifier;
/**
  ServiceProtocol performRequest implementation for this service.
  seealso:
  \code
  ServiceProtocol
  \endcode
*/
+ (void)performRequest:(NSURLRequest * _Nonnull)request response:(NSHTTPURLResponse * _Nonnull)response responseReturn:(responseReturnBlock _Nonnull)responseReturn dataReturn:(dataReturnBlock _Nonnull)dataReturn requestComplete:(requestCompleteBlock _Nonnull)requestComplete;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PGSDKLogger (SWIFT_EXTENSION(PredixMobileSDK))
@end

enum WaitState : NSInteger;
@class WaitStateReturn;

/**
  Primary interface for the PredixMobileSDK to communicate with the UI.
  Used to display the main UI, and the Authentication UI
  Informs the UI when to display a native UI waiting component (spinner or progress bar)
  Provides communication channel for notifications (script execution)
*/
SWIFT_PROTOCOL("_TtP15PredixMobileSDK23PredixAppWindowProtocol_")
@protocol PredixAppWindowProtocol
/**
  LoadURL will be called when the SDK wants the UI to display a new page, i.e. a Predix Mobile WebApp.
  Prior to calling LoadURL any attachments associated with the webapp document will be extracted.
  \param url URL to the HTML page the UI should load.
  Generally this is the file indicated in the “main” property of the webapp document, but may also be other values such as “about:blank”, non-URLs in the case of non-hybrid native applications, or for the authentication UI, URLs associated with offline password management.

  \param parameters The properties from the webapp document. Generally these are included in the webapp.json file when doing a \code
  pm publish
  \endcode. The webapp document can thus be used to pass infromation to the container for how to behave when loading the webapp.
  The example Predix Mobile iOS container uses this to indicate how scrolling behavior should be handled within the web view.

  \param onComplete Optional closure, that if included should be called when the URL load has been completed.

*/
- (void)loadURL:(NSURL * _Nonnull)url parameters:(NSDictionary * _Nullable)parameters onComplete:(void (^ _Nullable)(void))onComplete;
/**
  Informs the UI that the wait state should be updated, optionally displaying a message.
  Wait state visualizations can be progress bars, spinners, text, etc.
*/
- (void)updateWaitState:(enum WaitState)state message:(NSString * _Nullable)message;
/**
  Returns the current wait state to the SDK on request.
  The SDK will call this when a GET request has been made to the window service, spinner path (http:/pmapi/window/spinner)
*/
- (WaitStateReturn * _Nonnull)waitState;
@optional
/**
  Called when the SDK wants to send a message to the UI; generally a JavaScript command to be run in a webapp.
  This method is not usually implemented for native UI implementations.
  Notifications coming from the SDK will be sent to the WebApp through this method.
  For webapps, the provided script should be executed via a command like: \code
  stringByEvaluatingJavaScript(from: String)
  \endcode
  \param script The script string to evaluate.

*/
- (void)receiveAppNotification:(NSString * _Nonnull)script;
@end


/**
  Static class of elements Predix Mobile SDK consumers can use to adjust to configure aspects of the SDK.
*/
SWIFT_CLASS("_TtC15PredixMobileSDK27PredixMobilityConfiguration")
@interface PredixMobilityConfiguration : NSObject
/**
  Indicates the SDK will automatically listen for Application state events.
  Defaults to true. If false, the container application is expected to call PredixMobilityManager’s
  application state methods such as applicationWillTerminate, applicationDidBecomeActive, etc.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL automaticallyListenForApplicationStateEvents;)
+ (BOOL)automaticallyListenForApplicationStateEvents;
+ (void)setAutomaticallyListenForApplicationStateEvents:(BOOL)value;
/**
  Specifies the default logging level to be used if no logging level configuration is found.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum LoggerLevel defaultLoggingLevel;)
+ (enum LoggerLevel)defaultLoggingLevel;
+ (void)setDefaultLoggingLevel:(enum LoggerLevel)value;
/**
  Specifies the default database name to use. This value is overridden by the user’s information upon login, if a database name key is found within the user’s information.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultDatabaseName;)
+ (NSString * _Nonnull)defaultDatabaseName;
+ (void)setDefaultDatabaseName:(NSString * _Nonnull)value;
/**
  Specifies the authentication scheme to watch for during login.
  During authentication the user will login via a web page, this web page is then expected to redirect to a URL, in the format of <authenticationScheme>://<authenticationGrantIndicator>
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull authenticationScheme;)
+ (NSString * _Nonnull)authenticationScheme;
+ (void)setAuthenticationScheme:(NSString * _Nonnull)value;
/**
  Specifies the authentication grant indicator hostname to watch for during login.
  During authentication the user will login via a web page, this web page is then expected to redirect to a URL, in the format of <authenticationScheme>://<authenticationGrantIndicator>
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull authenticationGrantIndicator;)
+ (NSString * _Nonnull)authenticationGrantIndicator;
+ (void)setAuthenticationGrantIndicator:(NSString * _Nonnull)value;
/**
  Specifies the configuration key (as in a key/value pair) used to determine the logging level in either the info.plist or the settings bundle root.plist
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull loggingLevelConfigKey;)
+ (NSString * _Nonnull)loggingLevelConfigKey;
+ (void)setLoggingLevelConfigKey:(NSString * _Nonnull)value;
/**
  Specifies where the logging level configuration key/value should be found.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ConfigurationLocation loggingLevelConfigLocation;)
+ (enum ConfigurationLocation)loggingLevelConfigLocation;
+ (void)setLoggingLevelConfigLocation:(enum ConfigurationLocation)value;
/**
  Specifies the configuration key (as in a key/value pair) used to determine the “Trace logging level logs all requests” value is in either the info.plist or the settings bundle root.plist
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull traceLogsRequestsConfigKey;)
+ (NSString * _Nonnull)traceLogsRequestsConfigKey;
+ (void)setTraceLogsRequestsConfigKey:(NSString * _Nonnull)value;
/**
  Specifies where the “Trace logging level logs all requests” configuration key/value should be found.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ConfigurationLocation traceLogsRequestsConfigLocation;)
+ (enum ConfigurationLocation)traceLogsRequestsConfigLocation;
+ (void)setTraceLogsRequestsConfigLocation:(enum ConfigurationLocation)value;
/**
  Specifies the configuration key (as in a key/value pair) used to determine the server endpoint hostname in either the info.plist or the settings bundle root.plist
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull serverEndpointConfigKey;)
+ (NSString * _Nonnull)serverEndpointConfigKey;
+ (void)setServerEndpointConfigKey:(NSString * _Nonnull)value;
/**
  Specifies where the “server endpoint hostname” configuration key/value should be found.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ConfigurationLocation serverEndpointConfigLocation;)
+ (enum ConfigurationLocation)serverEndpointConfigLocation;
+ (void)setServerEndpointConfigLocation:(enum ConfigurationLocation)value;
/**
  The server endpoint path used to retrieve user session information during the login process.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull userSessionURLPath;)
+ (NSString * _Nonnull)userSessionURLPath;
+ (void)setUserSessionURLPath:(NSString * _Nonnull)value;
/**
  The server endpoint path used to initialize the login process and display the login page.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull loginURLPath;)
+ (NSString * _Nonnull)loginURLPath;
+ (void)setLoginURLPath:(NSString * _Nonnull)value;
/**
  The server endpoint path used to log the user out and remove the current user session.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull logoutURLPath;)
+ (NSString * _Nonnull)logoutURLPath;
+ (void)setLogoutURLPath:(NSString * _Nonnull)value;
/**
  The server endpoint path used to syncronize the local database.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull dataReplicationURLPath;)
+ (NSString * _Nonnull)dataReplicationURLPath;
+ (void)setDataReplicationURLPath:(NSString * _Nonnull)value;
/**
  The server endpoint path used to validate the user has a valid authenticated session.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull authorizationCheckURLPath;)
+ (NSString * _Nonnull)authorizationCheckURLPath;
+ (void)setAuthorizationCheckURLPath:(NSString * _Nonnull)value;
/**
  The key in the response JSON from the userSessionURLPath call that specifies the user name value. The value this key is associated with is expected to be a string.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull userSessionUsernameKey;)
+ (NSString * _Nonnull)userSessionUsernameKey;
+ (void)setUserSessionUsernameKey:(NSString * _Nonnull)value;
/**
  The key in the response JSON from the userSessionURLPath call that specifies the authentication status value. The value this key is associated with is expected to be a boolean.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull userSessionAuthenticatedKey;)
+ (NSString * _Nonnull)userSessionAuthenticatedKey;
+ (void)setUserSessionAuthenticatedKey:(NSString * _Nonnull)value;
/**
  The key in the response JSON from the userSessionURLPath call that specifies the database name value. The value this key is associated with is expected to be a string.
  If this property is nil, or not found in the user session information then defaultDatabaseName value is used for the database name.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable userSessionDatabaseNameKey;)
+ (NSString * _Nullable)userSessionDatabaseNameKey;
+ (void)setUserSessionDatabaseNameKey:(NSString * _Nullable)value;
/**
  Specifies the configuration key used to determine the PM app name to load in either the info.plist or the settings bundle root.plist
  This value is the “name” field in the app.json document loaded into the database with the PM cli “define” command.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull pmappDocumentNameKey;)
+ (NSString * _Nonnull)pmappDocumentNameKey;
+ (void)setPmappDocumentNameKey:(NSString * _Nonnull)value;
/**
  Specifies where the PM app name configuration key/value should be found.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ConfigurationLocation pmappDocumentNameConfigLocation;)
+ (enum ConfigurationLocation)pmappDocumentNameConfigLocation;
+ (void)setPmappDocumentNameConfigLocation:(enum ConfigurationLocation)value;
/**
  Specifies the configuration key used to determine the PM app version to load in either the info.plist or the settings bundle root.plist
  This value is the “version” field in the app.json document loaded into the database with the PM cli “define” command.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull pmappDocumentVersionKey;)
+ (NSString * _Nonnull)pmappDocumentVersionKey;
+ (void)setPmappDocumentVersionKey:(NSString * _Nonnull)value;
/**
  Specifies where the PM app version configuration key/value should be found.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ConfigurationLocation pmappDocumentVersionConfigLocation;)
+ (enum ConfigurationLocation)pmappDocumentVersionConfigLocation;
+ (void)setPmappDocumentVersionConfigLocation:(enum ConfigurationLocation)value;
/**
  The key in the PM app document that determines the initial webapp to load into the container at startup.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull pmAppDocumentWebAppNameKey;)
+ (NSString * _Nonnull)pmAppDocumentWebAppNameKey;
+ (void)setPmAppDocumentWebAppNameKey:(NSString * _Nonnull)value;
/**
  The key in the PM app document that determines the offline authentication webapp to use during offline login.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull pmAppDocumentOfflineAppNameKey;)
+ (NSString * _Nonnull)pmAppDocumentOfflineAppNameKey;
+ (void)setPmAppDocumentOfflineAppNameKey:(NSString * _Nonnull)value;
/**
  The key in the PM app document that determines the available webapps array.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull pmAppDocumentDependenciesKey;)
+ (NSString * _Nonnull)pmAppDocumentDependenciesKey;
+ (void)setPmAppDocumentDependenciesKey:(NSString * _Nonnull)value;
/**
  The hostname to be used for Predix Mobile SDK service calls.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull apiHostname;)
+ (NSString * _Nonnull)apiHostname;
+ (void)setApiHostname:(NSString * _Nonnull)value;
/**
  The default error message used in the catastrophic error display that is shown to the user when no webapp can be loaded or the application cannot otherwise continue.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull seriousErrorDefaultMessage;)
+ (NSString * _Nonnull)seriousErrorDefaultMessage;
+ (void)setSeriousErrorDefaultMessage:(NSString * _Nonnull)value;
/**
  The Bundled HTML filename used for the catastrophic error display that is shown to the user when no webapp can be loaded or the application cannot otherwise continue.
  If this file is not found a native UI alert message will be used.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull seriousErrorPage;)
+ (NSString * _Nonnull)seriousErrorPage;
+ (void)setSeriousErrorPage:(NSString * _Nonnull)value;
/**
  A closure that, if supplied, is run during the boot/restart service call. This can be used to perform additional container work that should be performed when the system is restarting.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable additionalBootRestartWorkflow)(SWIFT_NOESCAPE void (^ _Nonnull)(void));)
+ (void (^ _Nullable)(SWIFT_NOESCAPE void (^ _Nonnull)(void)))additionalBootRestartWorkflow;
+ (void)setAdditionalBootRestartWorkflow:(void (^ _Nullable)(SWIFT_NOESCAPE void (^ _Nonnull)(void)))value;
/**
  An optional array of services that should be registered during the boot process.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<Class <ServiceProtocol>> * _Nullable additionalBootServicesToRegister;)
+ (NSArray<Class <ServiceProtocol>> * _Nullable)additionalBootServicesToRegister;
+ (void)setAdditionalBootServicesToRegister:(NSArray<Class <ServiceProtocol>> * _Nullable)value;
/**
  Specifies the SDK will trap and log unhandled errors before the container crashes.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldLogUnhandledErrors;)
+ (BOOL)shouldLogUnhandledErrors;
+ (void)setShouldLogUnhandledErrors:(BOOL)value;
/**
  Specifies the SDK will automatically import default values from the Settings bundle into standard UserDefaults
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldInitializeDefaultsFromSettings;)
+ (BOOL)shouldInitializeDefaultsFromSettings;
+ (void)setShouldInitializeDefaultsFromSettings:(BOOL)value;
/**
  Specifies the SDK will attempt to detect URL requests for placeholder images from <a href="http://placehold.it">http://placehold.it</a> and issue a warning log entry when detected
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldIssueWarningsForPlaceholderURLs;)
+ (BOOL)shouldIssueWarningsForPlaceholderURLs;
+ (void)setShouldIssueWarningsForPlaceholderURLs:(BOOL)value;
/**
  Specifies the SDK will require the device to have a passcode set to proceed during the Boot service startup process.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL requireDevicePasscodeSet;)
+ (BOOL)requireDevicePasscodeSet;
+ (void)setRequireDevicePasscodeSet:(BOOL)value;
/**
  Specifies the key to use in NSUserDefaults to determine if the server endpoint has changed. When the server endpoint changes, as detected via this key, all user data is wiped from the device.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull defaultInitializationDetectionKey;)
+ (NSString * _Nonnull)defaultInitializationDetectionKey;
+ (void)setDefaultInitializationDetectionKey:(NSString * _Nonnull)value;
/**
  Specifies the default to indicate a watcher will log all networks requests for the app.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL traceLogsAllRequestsDefault;)
+ (BOOL)traceLogsAllRequestsDefault;
+ (void)setTraceLogsAllRequestsDefault:(BOOL)value;
/**
  Specifies an app-specific data that should be included when the device registers for push notificiations.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, id> * _Nullable remoteNotificationRegistrationAdditionalInfo;)
+ (NSDictionary<NSString *, id> * _Nullable)remoteNotificationRegistrationAdditionalInfo;
+ (void)setRemoteNotificationRegistrationAdditionalInfo:(NSDictionary<NSString *, id> * _Nullable)value;
/**
  the format of the document id to use when registering for push notifications.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull remoteNotificationRegistrationDocumentId;)
+ (NSString * _Nonnull)remoteNotificationRegistrationDocumentId;
+ (void)setRemoteNotificationRegistrationDocumentId:(NSString * _Nonnull)value;
/**
  the document type used for the push notification registratino document.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull remoteNotificationRegistrationDocumentType;)
+ (NSString * _Nonnull)remoteNotificationRegistrationDocumentType;
+ (void)setRemoteNotificationRegistrationDocumentType:(NSString * _Nonnull)value;
/**
  Optional settings used to tweak the behavior of push (client to server) data replication
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, id> * _Nullable replicationAdditionalPushSettings;)
+ (NSDictionary<NSString *, id> * _Nullable)replicationAdditionalPushSettings;
+ (void)setReplicationAdditionalPushSettings:(NSDictionary<NSString *, id> * _Nullable)value;
/**
  Optional settings used to tweak the behavior of pull (server to client) data replication
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, id> * _Nullable replicationAdditionalPullSettings;)
+ (NSDictionary<NSString *, id> * _Nullable)replicationAdditionalPullSettings;
+ (void)setReplicationAdditionalPullSettings:(NSDictionary<NSString *, id> * _Nullable)value;
/**
  The name of a PushReplicationFilter, as setup in pushReplicationFilterDefinitions, to use when replication is initially setup
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable defaultPushReplicationFilterName;)
+ (NSString * _Nullable)defaultPushReplicationFilterName;
+ (void)setDefaultPushReplicationFilterName:(NSString * _Nullable)value;
/**
  Dictionary of filter parameters to use when replication is initially setup
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, id> * _Nullable defaultPushReplicationFilterParameters;)
+ (NSDictionary<NSString *, id> * _Nullable)defaultPushReplicationFilterParameters;
+ (void)setDefaultPushReplicationFilterParameters:(NSDictionary<NSString *, id> * _Nullable)value;
/**
  List of channels used to restrict data coming from the server when replication is initially setup
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSString *> * _Nullable defaultPullReplicationChannels;)
+ (NSArray<NSString *> * _Nullable)defaultPullReplicationChannels;
+ (void)setDefaultPullReplicationChannels:(NSArray<NSString *> * _Nullable)value;
/**
  Optional keychain access group. If provided this group will be used for all keychain access.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable keychainAccessGroup;)
+ (NSString * _Nullable)keychainAccessGroup;
+ (void)setKeychainAccessGroup:(NSString * _Nullable)value;
/**
  Specifies the prefix to use for keychain storage keys.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull keychainKeyPrefix;)
+ (NSString * _Nonnull)keychainKeyPrefix;
+ (void)setKeychainKeyPrefix:(NSString * _Nonnull)value;
/**
  Provides a short string of version information of the running app, the Predix Mobile SDK, and some of its dependent components.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionInfo;)
+ (NSString * _Nonnull)versionInfo;
/**
  Specifies that when the SDK detects the ApplicationDidBecomeActive application state, the SDK can start interacting with the UI immediately.
  If the consuming app wants finer control over when the UI is ready for SDK interaction, it can set this flag to false, and manually post
  the UIReadyNotification to inform the SDK when the UI is ready for interaction.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL considerUIReadyWhenApplicationDidBecomeActive;)
+ (BOOL)considerUIReadyWhenApplicationDidBecomeActive;
+ (void)setConsiderUIReadyWhenApplicationDidBecomeActive:(BOOL)value;
/**
  This closure allows the implementation of the non-web based serious error pages to be overridden.
  In iOS the default implementation shows a UIAlertController with the error details.
  In the macOS version of the SDK there is no default implementation.
  important:
  macOS containers must include a web-based serious error page, or should implement this closure.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nonnull displaySeriousErrorPopup)(NSString * _Nonnull, void (^ _Nonnull)(void));)
+ (void (^ _Nonnull)(NSString * _Nonnull, void (^ _Nonnull)(void)))displaySeriousErrorPopup;
+ (void)setDisplaySeriousErrorPopup:(void (^ _Nonnull)(NSString * _Nonnull, void (^ _Nonnull)(void)))value;
/**
  File system URL under which the SDK uses for all application storage.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull localStorageURL;)
+ (NSURL * _Nonnull)localStorageURL;
/**
  File system URL under which the SDK uses for all application storage for the current logged in user. Nil until after authentication completes.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nullable userLocalStorageURL;)
+ (NSURL * _Nullable)userLocalStorageURL;
/**
  Tells the SDK to initialize, load configuration from settings, prepare the logging system, and prepare the SDK for startup. If not called by the time PredixMobilityManager.startApp is called, it will be called at that time.
*/
+ (void)loadConfiguration;
/**
  Helper method takes a view name and version, and map function closure, creates a ViewDefinition and adds it to the dataViewDefinitions property.
*/
+ (void)appendDataViewDefinition:(NSString * _Nonnull)viewName version:(NSString * _Nonnull)version mapFunction:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(id _Nonnull, id _Nullable)))mapFunction;
/**
  Helper method takes a view name and version, and map function closure, and reduce function closure, creates a ViewDefinition and adds it to the dataViewDefinitions property.
*/
+ (void)appendDataViewDefinition:(NSString * _Nonnull)viewName version:(NSString * _Nonnull)version mapFunction:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(id _Nonnull, id _Nullable)))mapFunction reduceFunction:(id _Nonnull (^ _Nullable)(NSArray * _Nonnull, NSArray * _Nonnull, BOOL))reduceFunction;
/**
  Adds a filter for Push replication, consisting of a filter name, and a closure called to determine if a given document should be sent to the server.
*/
+ (void)addPushReplicationFilterWithName:(NSString * _Nonnull)name filter:(BOOL (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSDictionary * _Nullable))filter;
/**
  Returns a dictionary containing version information of the app, the SDK, and dependent components, as well as some basic environmental information for the current device.
*/
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getVersionInfo;
/**
  Removes all data associated with the app, including the local database and keychain entries.
*/
+ (void)wipeApplicationData;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  <h2>Predix Mobile SDK main manager class</h2>
  Controls the interface between the container application and the SDK.
*/
SWIFT_CLASS("_TtC15PredixMobileSDK21PredixMobilityManager")
@interface PredixMobilityManager : NSObject
/**
  Shared instance - invalid until init is called.
  important:
  init must be called before sharedInstance.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PredixMobilityManager * _Nonnull sharedInstance;)
+ (PredixMobilityManager * _Nonnull)sharedInstance;
/**
  The PredixAppWindowProtocol object responsible for webapp UI display
*/
@property (nonatomic, readonly, strong) id <PredixAppWindowProtocol> _Nonnull packageWindow;
/**
  True if the authentication UI is currently being displayed
*/
@property (nonatomic, readonly) BOOL isShowingAuthentication;
/**
  Initializes the Predix Mobile SDK
  \param packageWindow The PredixAppWindowProtocol object responsible for webapp UI display

  \param presentAuthentication Closure that will be called when the SDK needs the container to present the authentication UI to the user.
  The packageWindow object is provided to this closure. The consuming container app should return a PredixAppWindowProtocol object that controls the authentication UI.

  \param dismissAuthentication Closure that will be called when the SDK needs the container to dismiss the authentication UI. The PredixAppWindowProtocol object passed to the SDK during presentAuthentication will be provided.

  \param authenticationWindow Parameter to dismissAuthentication closure, the PredixAppWindowProtocol object passed to the SDK during presentAuthentication

*/
- (nonnull instancetype)initWithPackageWindow:(id <PredixAppWindowProtocol> _Nonnull)packageWindow presentAuthentication:(id <PredixAppWindowProtocol> _Nonnull (^ _Nonnull)(id <PredixAppWindowProtocol> _Nonnull))presentAuthentication dismissAuthentication:(void (^ _Nonnull)(id <PredixAppWindowProtocol> _Nonnull))dismissAuthentication OBJC_DESIGNATED_INITIALIZER;
/**
  Starts the Predix Mobile SDK application, loading configuration and calling the boot service when the UI is ready.
*/
- (void)startApp;
/**
  Starts the boot service, with appropriate handling using the Serious Error Page for boot service errors.
*/
- (void)callBootService;
/**
  Helper to show the Serious Error Page with the provided message string.
  \param msg String message to show in the error UI.

*/
- (void)ShowUserError:(NSString * _Nonnull)msg;
/**
  Adds a translation for native notifications for easier consuming by JavaScript.
  Listens for notifications, and re-posts notifications after running a closure that can translate a notification object into a more JSON  consumable format.
  \param forNotification Name of the notification to translate

  \param asNotification Name to re-post the notification after translation

  \param translation Closure to call to transform the notification data from the original Notification into a JSON consumable format.

*/
- (void)addTranslationForNotification:(NSNotificationName _Nonnull)forNotification asNotification:(NSNotificationName _Nonnull)asNotification translation:(NSDictionary<NSString *, id> * _Nullable (^ _Nonnull)(NSNotification * _Nonnull))translation;
/**
  Removes a notification translation.
  \param forNotification Name of the notification translation to remove.

*/
- (void)removeTranslationForNotification:(NSNotificationName _Nonnull)forNotification;
/**
  Indicates authentication has completed, and the running authentication service should complete processing.
  Generally authentication completion is automatically detected, but in some instances, like authentication failure, it may be necessary for the UI to explicity inform the SDK that the authentication process has completed.
*/
- (void)authenticationComplete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/**
  Public protocol implemented by the Service Router for service registration and processing requests.
  seealso:
  \code
  ServiceRouter
  \endcode
*/
SWIFT_PROTOCOL("_TtP15PredixMobileSDK21ServiceRouterProtocol_")
@protocol ServiceRouterProtocol
/**
  Registers the provided service class.
  \param service class type meeting the ServiceProtocol type.


  returns:

  true if registration was successful.
*/
- (BOOL)registerService:(Class <ServiceProtocol> _Nonnull)service;
/**
  Unregisters the provided service class, if the service was previously registered.
  If the service was not registered this method has no effect.
  \param service class type meeting the ServiceProtocol type to unregister

*/
- (void)unregisterService:(Class <ServiceProtocol> _Nonnull)service;
/**
  Processes the provided request, routing the request to the appropriate service.
  The request URL will be similar to: \code
  http://pmapi/serviceid/extrapath
  \endcode
  \param request The URLRequest to process

  \param responseBlock First of three return closures. The service will call this closure to return response object back to the calling code.

  \param dataBlock Second of the three return closures. The service will call this closure to return data back to the calling code.
  This closure may not be called if the service does not return any data.

  \param completionBlock Third and final of the three return closures. The service will call this closure when the service request has completed.

*/
- (void)processRequest:(NSURLRequest * _Nonnull)request responseBlock:(responseReturnBlock _Nonnull)responseBlock dataBlock:(dataReturnBlock _Nonnull)dataBlock completionBlock:(requestCompleteBlock _Nonnull)completionBlock;
/**
  Constructs a basic GET request for given service identifier and processes the provided request, routing the request to the appropriate service.
  The request URL will be similar to: \code
  http://pmapi/serviceid
  \endcode
  \param serviceId Service Identifier, specifying the service that should process the request.

  \param responseBlock First of three return closures. The service will call this closure to return response object back to the calling code.

  \param dataBlock Second of the three return closures. The service will call this closure to return data back to the calling code.
  This closure may not be called if the service does not return any data.

  \param completionBlock Third and final of the three return closures. The service will call this closure when the service request has completed.

*/
- (void)processRequestWithServiceId:(NSString * _Nonnull)serviceId responseBlock:(responseReturnBlock _Nonnull)responseBlock dataBlock:(dataReturnBlock _Nonnull)dataBlock completionBlock:(requestCompleteBlock _Nonnull)completionBlock;
/**
  Constructs a GET request for given service identifier and processes the provided request, routing the request to the appropriate service.
  The request URL will be similar to: \code
  http://pmapi/serviceid/extrapath
  \endcode
  <ul>
    <li>
      examples, given a servideId of “serviceid”, and extraPath of:
      <ul>
        <li>
          \code
          foo
          \endcode –> resulting url: \code
          http://pmapi/serviceid/foo
          \endcode
        </li>
        <li>
          \code
          foo/bar?some=query&another=value
          \endcode –> resulting url: \code
          http://pmapi/serviceid/foo/bar?some=query&another=value
          \endcode
        </li>
      </ul>
    </li>
  </ul>
  \param serviceId Service Identifier, specifying the service that should process the request.

  \param extraPath Optional string to include in the request URL after the service identifier. This string may include any valid URL components, including multiple path depths, and query strings

  \param responseBlock First of three return closures. The service will call this closure to return response object back to the calling code.

  \param dataBlock Second of the three return closures. The service will call this closure to return data back to the calling code.
  This closure may not be called if the service does not return any data.

  \param completionBlock Third and final of the three return closures. The service will call this closure when the service request has completed.

*/
- (void)processRequest:(NSString * _Nonnull)serviceId extraPath:(NSString * _Nullable)extraPath responseBlock:(responseReturnBlock _Nonnull)responseBlock dataBlock:(dataReturnBlock _Nonnull)dataBlock completionBlock:(requestCompleteBlock _Nonnull)completionBlock;
/**
  Constructs a request for given service identifier and processes the provided request, routing the request to the appropriate service.
  The request URL will be similar to: \code
  http://pmapi/serviceid/extrapath
  \endcode
  <ul>
    <li>
      examples, given a servideId of “serviceid”, and extraPath of:
      <ul>
        <li>
          \code
          foo
          \endcode –> resulting url: \code
          http://pmapi/serviceid/foo
          \endcode
        </li>
        <li>
          \code
          foo/bar?some=query&another=value
          \endcode –> resulting url: \code
          http://pmapi/serviceid/foo/bar?some=query&another=value
          \endcode
        </li>
      </ul>
    </li>
  </ul>
  \param serviceId Service Identifier, specifying the service that should process the request.

  \param extraPath Optional string to include in the request URL after the service identifier. This string may include any valid URL components, including multiple path depths, and query strings

  \param method HTTP method string to use for the request, i.e. “GET”, “POST, “PUT”, “DELETE”, “OPTION”, etc.

  \param data Body data to include in the request.

  \param responseBlock First of three return closures. The service will call this closure to return response object back to the calling code.

  \param dataBlock Second of the three return closures. The service will call this closure to return data back to the calling code.
  This closure may not be called if the service does not return any data.

  \param completionBlock Third and final of the three return closures. The service will call this closure when the service request has completed.

*/
- (void)processRequest:(NSString * _Nonnull)serviceId extraPath:(NSString * _Nullable)extraPath method:(NSString * _Nonnull)method data:(NSData * _Nullable)data responseBlock:(responseReturnBlock _Nonnull)responseBlock dataBlock:(dataReturnBlock _Nonnull)dataBlock completionBlock:(requestCompleteBlock _Nonnull)completionBlock;
@end


/**
  The ServiceRouter controls what services are available or unavailable and processes service requests.
  When a service is \code
  registered
  \endcode it is made available to process requests. When it is \code
  unregistered
  \endcode it is no longer available to service requests.
  <ul>
    <li>
      All services registered must have a unique serviceIdentifier string.
    </li>
    <li>
      Attempts to register a service with a serviceIdentifier string that is already registered will not be successful.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC15PredixMobileSDK13ServiceRouter")
@interface ServiceRouter : NSObject <ServiceRouterProtocol>
/**
  Shared Instance
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <ServiceRouterProtocol> _Nonnull sharedInstance;)
+ (id <ServiceRouterProtocol> _Nonnull)sharedInstance;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Registers the provided service class.
  \param service class type meeting the ServiceProtocol type.


  returns:

  true if registration was successful.
*/
- (BOOL)registerService:(Class <ServiceProtocol> _Nonnull)service;
/**
  Unregisters the provided service class, if the service was previously registered.
  If the service was not registered this method has no effect.
  \param service class type meeting the ServiceProtocol type to unregister

*/
- (void)unregisterService:(Class <ServiceProtocol> _Nonnull)service;
/**
  Unregisters a service class by it’s serviceIdentifier string.
  Does nothing if no service with the given service identifier string was previously registered.
  \param serviceId String corresponding to a previously registered service’s service identifier.

*/
- (void)unregisterServiceByIdentifier:(NSString * _Nonnull)serviceId;
/**
  Constructs a basic GET request for given service identifier and processes the provided request, routing the request to the appropriate service.
  The request URL will be similar to: \code
  http://pmapi/serviceid
  \endcode
  \param serviceId Service Identifier, specifying the service that should process the request.

  \param responseBlock First of three return closures. The service will call this closure to return response object back to the calling code.

  \param dataBlock Second of the three return closures. The service will call this closure to return data back to the calling code.
  This closure may not be called if the service does not return any data.

  \param completionBlock Third and final of the three return closures. The service will call this closure when the service request has completed.

*/
- (void)processRequestWithServiceId:(NSString * _Nonnull)serviceId responseBlock:(responseReturnBlock _Nonnull)responseBlock dataBlock:(dataReturnBlock _Nonnull)dataBlock completionBlock:(requestCompleteBlock _Nonnull)completionBlock;
/**
  Constructs a GET request for given service identifier and processes the provided request, routing the request to the appropriate service.
  The request URL will be similar to: \code
  http://pmapi/serviceid/extrapath
  \endcode
  \param serviceId Service Identifier, specifying the service that should process the request.

  \param extraPath Optional string to include in the request URL after the service identifier. This string may include any valid URL components, including multiple path depths, and query strings
  <ul>
    <li>
      examples, given a servideId of “serviceid”, and extraPath of:
      <ul>
        <li>
          \code
          foo
          \endcode –> resulting url: \code
          http://pmapi/serviceid/foo
          \endcode
        </li>
        <li>
          \code
          foo/bar?some=query&another=value
          \endcode –> resulting url: \code
          http://pmapi/serviceid/foo/bar?some=query&another=value
          \endcode
        </li>
      </ul>
    </li>
  </ul>

  \param responseBlock First of three return closures. The service will call this closure to return response object back to the calling code.

  \param dataBlock Second of the three return closures. The service will call this closure to return data back to the calling code.
  This closure may not be called if the service does not return any data.

  \param completionBlock Third and final of the three return closures. The service will call this closure when the service request has completed.

*/
- (void)processRequest:(NSString * _Nonnull)serviceId extraPath:(NSString * _Nullable)extraPath responseBlock:(responseReturnBlock _Nonnull)responseBlock dataBlock:(dataReturnBlock _Nonnull)dataBlock completionBlock:(requestCompleteBlock _Nonnull)completionBlock;
/**
  Constructs a request for given service identifier and processes the provided request, routing the request to the appropriate service.
  The request URL will be similar to: \code
  http://pmapi/serviceid/extrapath
  \endcode
  <ul>
    <li>
      examples, given a servideId of “serviceid”, and extraPath of:
      <ul>
        <li>
          \code
          foo
          \endcode –> resulting url: \code
          http://pmapi/serviceid/foo
          \endcode
        </li>
        <li>
          \code
          foo/bar?some=query&another=value
          \endcode –> resulting url: \code
          http://pmapi/serviceid/foo/bar?some=query&another=value
          \endcode
        </li>
      </ul>
    </li>
  </ul>
  \param serviceId Service Identifier, specifying the service that should process the request.

  \param extraPath Optional string to include in the request URL after the service identifier. This string may include any valid URL components, including multiple path depths, and query strings

  \param method HTTP method string to use for the request, i.e. “GET”, “POST, “PUT”, “DELETE”, “OPTION”, etc.

  \param data Body data to include in the request.

  \param responseBlock First of three return closures. The service will call this closure to return response object back to the calling code.

  \param dataBlock Second of the three return closures. The service will call this closure to return data back to the calling code.
  This closure may not be called if the service does not return any data.

  \param completionBlock Third and final of the three return closures. The service will call this closure when the service request has completed.

*/
- (void)processRequest:(NSString * _Nonnull)serviceId extraPath:(NSString * _Nullable)extraPath method:(NSString * _Nonnull)method data:(NSData * _Nullable)data responseBlock:(responseReturnBlock _Nonnull)responseBlock dataBlock:(dataReturnBlock _Nonnull)dataBlock completionBlock:(requestCompleteBlock _Nonnull)completionBlock;
/**
  Processes the provided request, routing the request to the appropriate service.
  The request URL will be similar to: \code
  http://pmapi/serviceid/extrapath
  \endcode
  \param request The URLRequest to process

  \param responseBlock First of three return closures. The service will call this closure to return response object back to the calling code.

  \param dataBlock Second of the three return closures. The service will call this closure to return data back to the calling code.
  This closure may not be called if the service does not return any data.

  \param completionBlock Third and final of the three return closures. The service will call this closure when the service request has completed.

*/
- (void)processRequest:(NSURLRequest * _Nonnull)request responseBlock:(responseReturnBlock _Nonnull)responseBlock dataBlock:(dataReturnBlock _Nonnull)dataBlock completionBlock:(requestCompleteBlock _Nonnull)completionBlock;
@end



@interface NSURLProtocol (SWIFT_EXTENSION(PredixMobileSDK))
@end

/**
  Possible Wait states, either the spinner/progress bar is showing (Waiting), or not showing (NotWaiting).
*/
typedef SWIFT_ENUM(NSInteger, WaitState) {
/**
  Spinner or other indicator is displayed while user is waiting for a long-running task
*/
  WaitStateWaiting = 0,
/**
  No spinner is being displayed, user is not waiting
*/
  WaitStateNotWaiting = 1,
};


/**
  Wrapper object used for returning the wait state of the UI. Encapsulates both the WaitState enumeration, and the optional string message.
*/
SWIFT_CLASS("_TtC15PredixMobileSDK15WaitStateReturn")
@interface WaitStateReturn : NSObject
/**
  Initializes wrapper with given WaitState and message
  \param state WaitState enumeration

  \param message Optional message to include.

*/
- (nonnull instancetype)initWithState:(enum WaitState)state message:(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes wrapper with given WaitState and message with positional parameters.
  \param state WaitState enumeration

  \param message Optional message to include.

*/
- (nonnull instancetype)init:(enum WaitState)state :(NSString * _Nullable)message OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes wrapper with given WaitState. Message string is nil.
  \param state WaitState enumeration

*/
- (nonnull instancetype)initWithState:(enum WaitState)state OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes wrapper with given WaitState. Message string is nil.
  \param state WaitState enumeration

*/
- (nonnull instancetype)init:(enum WaitState)state OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
